{
    "swagger": "2.0",
    "info": {
        "description": "This is a CI server.",
        "version": "1.0.0",
        "title": "CI server",
        "contact": {
            "email": "elhazne@gmail.com"
        }
    },
    "basePath": "/v2",
    "paths": {
        "/api/settings": {
            "get": {
                "tags": ["settings"],
                "summary": "Get current settings",
                "description": "Get current settings",
                "operationId": "getSettings",
                "consumes": ["application/json", "application/xml"],
                "produces": ["application/xml", "application/json"],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/Settings"
                            }
                        }
                    },
                    "400": {
                        "description": "Cannot get current settings"
                    }
                }
            },
            "post": {
                "tags": ["settings"],
                "summary": "Set new settings",
                "description": "Set new settings",
                "operationId": "postSettings",
                "consumes": ["application/json", "application/xml"],
                "produces": ["application/xml", "application/json"],
                "parameters": [
                    {
                        "name": "repoName",
                        "in": "formData",
                        "description": "Name of repo",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "buildCommand",
                        "in": "formData",
                        "description": "Command npm run ---",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mainBranch",
                        "in": "formData",
                        "description": "Name of the main branch",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "period",
                        "in": "formData",
                        "description": "Period",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/Settings"
                            }
                        }
                    },
                    "400": {
                        "description": "Add description"
                    },
                    "404": {
                        "description": "Add description"
                    },
                    "405": {
                        "description": "Add description"
                    }
                }
            }
        },
        "/api/builds": {
            "get": {
                "tags": ["builds"],
                "summary": "Get list of builds",
                "description": "Get list of builds",
                "operationId": "getBuilds",
                "produces": ["application/xml", "application/json"],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Build"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/pet/findByTags": {
            "get": {
                "tags": ["pet"],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": ["application/xml", "application/json"],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": ["write:pets", "read:pets"]
                    }
                ],
                "deprecated": true
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": ["pet"],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "produces": ["application/xml", "application/json"],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "tags": ["pet"],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "consumes": ["application/x-www-form-urlencoded"],
                "produces": ["application/xml", "application/json"],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "Updated name of the pet",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "formData",
                        "description": "Updated status of the pet",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": ["write:pets", "read:pets"]
                    }
                ]
            },
            "delete": {
                "tags": ["pet"],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": ["application/xml", "application/json"],
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "petstore_auth": ["write:pets", "read:pets"]
                    }
                ]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": ["pet"],
                "summary": "uploads an image",
                "description": "",
                "operationId": "uploadFile",
                "consumes": ["multipart/form-data"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "additionalMetadata",
                        "in": "formData",
                        "description": "Additional data to pass to server",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file to upload",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "security": [
                    {
                        "petstore_auth": ["write:pets", "read:pets"]
                    }
                ]
            }
        }
    },
    "definitions": {
        "Build": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Build"
            }
        },
        "Settings": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            },
            "xml": {
                "name": "Settings"
            }
        },
        "Pet": {
            "type": "object",
            "required": ["name", "photoUrls"],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "category": {
                    "$ref": "#/definitions/Settings"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "photoUrls": {
                    "type": "array",
                    "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                    },
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "xml": {
                        "name": "tag",
                        "wrapped": true
                    },
                    "items": {
                        "$ref": "#/definitions/Build"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": ["available", "pending", "sold"]
                }
            },
            "xml": {
                "name": "Pet"
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}
