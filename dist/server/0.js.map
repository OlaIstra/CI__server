{"version":3,"sources":["webpack:///./server/HttpStatus.ts","webpack:///./server/components/builds/buildControllers.ts","webpack:///./server/components/builds/buildRouter.ts","webpack:///./server/components/builds/buildServices.ts","webpack:///./server/components/error/error.ts","webpack:///./server/components/gitCommands/gitCommandsService.ts","webpack:///./server/components/routes.ts","webpack:///./server/components/settings/settingsControllers.ts","webpack:///./server/components/settings/settingsRouter.ts","webpack:///./server/components/settings/settingsServices.ts"],"names":["HttpStatus","getBuilds","_","res","builds","buildService","send","err","AppError","name","httpCode","description","saveBuild","req","commitHash","body","settings","settingsService","getSettings","branchName","mainBranch","buildInfo","gitCommandsService","getCommitByHash","result","getBuildDetails","response","params","id","getBuildLogs","buildLogs","deleteBuilds","router","Router","get","post","delete","repository","getRepository","Build","find","getBuild","buildId","findOne","build","save","updateBuild","buildData","prevBuild","isEqual","deepEqual","OK","NOT_MODIFIED","clear","Error","constructor","isOperational","Object","setPrototypeOf","new","target","prototype","captureStackTrace","require","config","localRepo","process","env","LOCAL_REPO","execAsync","promisify","exec","homeDir","os","homedir","localRepoPath","path","join","executeCommand","command","options","cloneRepo","userName","repoName","isLocalRepo","findLocalRepo","deleteLocalRepo","file","fs","statSync","isDirectory","checkout","stdout","cwd","authorName","commitMessage","String","replace","split","use","settingsRouter","buildRouter","console","log","saveSettings","Settings","settingsData","prevSettings","newSettings","create","update"],"mappings":"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","file":"0.js","sourcesContent":["export enum HttpStatus {\n    CONTINUE = 100,\n    SWITCHING_PROTOCOLS = 101,\n    PROCESSING = 102,\n    OK = 200,\n    CREATED = 201,\n    ACCEPTED = 202,\n    NON_AUTHORITATIVE_INFORMATION = 203,\n    NO_CONTENT = 204,\n    RESET_CONTENT = 205,\n    PARTIAL_CONTENT = 206,\n    AMBIGUOUS = 300,\n    MOVED_PERMANENTLY = 301,\n    FOUND = 302,\n    SEE_OTHER = 303,\n    NOT_MODIFIED = 304,\n    TEMPORARY_REDIRECT = 307,\n    PERMANENT_REDIRECT = 308,\n    BAD_REQUEST = 400,\n    UNAUTHORIZED = 401,\n    PAYMENT_REQUIRED = 402,\n    FORBIDDEN = 403,\n    NOT_FOUND = 404,\n    METHOD_NOT_ALLOWED = 405,\n    NOT_ACCEPTABLE = 406,\n    PROXY_AUTHENTICATION_REQUIRED = 407,\n    REQUEST_TIMEOUT = 408,\n    CONFLICT = 409,\n    GONE = 410,\n    LENGTH_REQUIRED = 411,\n    PRECONDITION_FAILED = 412,\n    PAYLOAD_TOO_LARGE = 413,\n    URI_TOO_LONG = 414,\n    UNSUPPORTED_MEDIA_TYPE = 415,\n    REQUESTED_RANGE_NOT_SATISFIABLE = 416,\n    EXPECTATION_FAILED = 417,\n    I_AM_A_TEAPOT = 418,\n    UNPROCESSABLE_ENTITY = 422,\n    FAILED_DEPENDENCY = 424,\n    TOO_MANY_REQUESTS = 429,\n    INTERNAL_SERVER_ERROR = 500,\n    NOT_IMPLEMENTED = 501,\n    BAD_GATEWAY = 502,\n    SERVICE_UNAVAILABLE = 503,\n    GATEWAY_TIMEOUT = 504,\n    HTTP_VERSION_NOT_SUPPORTED = 505,\n}\n","import { Response, Request } from 'express';\nimport { AppError } from '@server/components/error/error';\nimport { gitCommandsService } from '@server/components/gitCommands/gitCommandsService';\nimport { settingsService } from '@server/components/settings/settingsServices';\n\nimport { buildService } from './buildServices';\nimport { Build } from './buildsEntity';\nimport { IBuildCommit } from './interfaces';\n\nexport const getBuilds = async (_: unknown, res: Response<Build[]>): Promise<void> => {\n    try {\n        const builds = await buildService.getBuilds();\n        res.send(builds);\n    } catch (err) {\n        throw new AppError(err.name, err.httpCode, err.description);\n    }\n};\n\nexport const saveBuild = async (\n    req: Request<{ commitHash: string }>,\n    res: Response<IBuildCommit>,\n): Promise<void> => {\n    const { commitHash } = req.body;\n\n    const settings = await settingsService.getSettings();\n\n    const branchName = settings?.mainBranch;\n\n    const buildInfo = await gitCommandsService.getCommitByHash(commitHash, branchName);\n    try {\n        const result = await buildService.saveBuild(buildInfo);\n        res.send(result);\n    } catch (err) {\n        throw new AppError(err.name, err.httpCode, err.description);\n    }\n};\n\nexport const getBuildDetails = async (\n    req: Request<{ id: string }>,\n    res: Response<Build>,\n): Promise<void> => {\n    try {\n        const response = await buildService.getBuildDetails(req.params.id);\n        res.send(response);\n    } catch (err) {\n        throw new AppError(err.name, err.httpCode, err.description);\n    }\n};\n\nexport const getBuildLogs = async (\n    req: Request<{ id: string }>,\n    res: Response<Build['buildLogs']>,\n): Promise<void> => {\n    try {\n        const result = await buildService.getBuildDetails(req.params.id);\n        res.send(result?.buildLogs);\n    } catch (err) {\n        throw new AppError(err.name, err.httpCode, err.description);\n    }\n};\n\nexport const deleteBuilds = async (_: unknown, res: Response<string>): Promise<void> => {\n    try {\n        await buildService.deleteBuilds();\n        res.send('success');\n    } catch (err) {\n        throw new AppError(err.name, err.httpCode, err.description);\n    }\n};\n","import { Router } from 'express';\n\nimport {\n    getBuilds,\n    saveBuild,\n    getBuildDetails,\n    getBuildLogs,\n    deleteBuilds,\n} from './buildControllers';\n\nconst router = Router();\n\nrouter.get('/', getBuilds);\n\nrouter.post('/', saveBuild);\n\nrouter.get('/:id', getBuildDetails);\n\nrouter.get('/:id/logs', getBuildLogs);\n\nrouter.delete('/', deleteBuilds);\n\nexport default router;\n","import deepEqual from 'deep-equal';\nimport { getRepository } from 'typeorm';\nimport { AppError } from '@server/components/error/error';\nimport { HttpStatus } from '@server/HttpStatus';\n\nimport { Build } from './buildsEntity';\nimport { IBuildCommit } from './interfaces';\n\nexport const buildService = {\n    getBuilds: async (): Promise<Build[]> => {\n        try {\n            const repository = getRepository(Build);\n            return repository.find();\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    getBuild: async (buildId: string): Promise<Build | undefined> => {\n        try {\n            const repository = getRepository(Build);\n            return repository.findOne(buildId);\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    saveBuild: async (build: IBuildCommit): Promise<IBuildCommit> => {\n        try {\n            const repository = getRepository(Build);\n            return repository.save(build);\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    updateBuild: async (buildId: string, buildData: Build): Promise<number> => {\n        try {\n            const repository = getRepository(Build);\n\n            const prevBuild = await repository.findOne({ id: buildId });\n\n            const isEqual = deepEqual(prevBuild, buildData);\n\n            if (!isEqual) {\n                repository.save(buildData);\n                return HttpStatus.OK;\n            } else {\n                return HttpStatus.NOT_MODIFIED;\n            }\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    deleteBuilds: async (): Promise<void> => {\n        try {\n            const repository = getRepository(Build);\n            await repository.clear();\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    getBuildDetails: async (buildId: string): Promise<Build | undefined> => {\n        try {\n            const repository = getRepository(Build);\n            return repository.findOne({ id: buildId });\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n};\n","import { HttpCode } from './httpStatusCodes';\n\nexport class AppError extends Error {\n    public readonly name: string;\n    public readonly httpCode: HttpCode;\n    public readonly isOperational: boolean;\n\n    constructor(name: string, httpCode: HttpCode, description: string, isOperational = true) {\n        super(description);\n\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain\n\n        this.name = name;\n        this.httpCode = httpCode;\n        this.isOperational = isOperational;\n\n        Error.captureStackTrace(this);\n    }\n}\n","import path from 'path';\nimport { promisify } from 'util';\nimport { exec, ExecOptions } from 'child_process';\nimport os from 'os';\nimport fs from 'fs';\nimport { AppError } from '@server/components/error/error';\nimport { IBuildCommit } from '@server/components/builds/interfaces';\n\nrequire('dotenv').config();\n\nconst localRepo = process.env.LOCAL_REPO || '';\nconst execAsync = promisify(exec);\nconst homeDir = os.homedir();\nconst localRepoPath = path.join(homeDir, localRepo);\n\nexport const gitCommandsService = {\n    executeCommand: async (\n        command: string,\n        options?: ExecOptions,\n    ): Promise<{ stdout: string | Buffer; stderr: string | Buffer }> => {\n        return execAsync(command, options);\n    },\n\n    cloneRepo: (userName: string, repoName: string): void => {\n        try {\n            const isLocalRepo = gitCommandsService.findLocalRepo();\n\n            if (isLocalRepo) {\n                gitCommandsService.deleteLocalRepo();\n            }\n\n            const command = `git clone https://github.com/${userName}/${repoName} ${localRepoPath}`;\n            gitCommandsService.executeCommand(command);\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    findLocalRepo: (): boolean => {\n        try {\n            const file = fs.statSync(path.join(homeDir, localRepo));\n            return file.isDirectory();\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    deleteLocalRepo: (): void => {\n        try {\n            const command = `rm -rf ${localRepoPath}`;\n            gitCommandsService.executeCommand(command);\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    checkout: (branchName: string): void => {\n        try {\n            const command = `cd ${localRepoPath} && git checkout ${branchName}`;\n            gitCommandsService.executeCommand(command);\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    getCommitByHash: async (commitHash = '', branchName = 'master'): Promise<IBuildCommit> => {\n        await gitCommandsService.checkout(branchName);\n\n        const { stdout } = await gitCommandsService.executeCommand(\n            `git log -1 --format=\"%an|%B\" ${commitHash}`,\n            {\n                cwd: localRepoPath,\n            },\n        );\n\n        const [authorName, commitMessage] = String(stdout)\n            .replace(/\\n/g, '')\n            .split('|');\n\n        return { authorName, commitMessage, commitHash, branchName };\n    },\n};\n","import { Router } from 'express';\n\nimport buildRouter from './builds/buildRouter';\nimport settingsRouter from './settings/settingsRouter';\n\nconst router = Router();\n\nexport default function(): Router {\n    router.use('/settings', settingsRouter);\n    router.use('/builds', buildRouter);\n    return router;\n}\n","import { Request, Response } from 'express';\nimport { AppError } from '@server/components/error/error';\nimport { gitCommandsService } from '@server/components/gitCommands/gitCommandsService';\n\nimport { settingsService } from './settingsServices';\nimport { ISettings } from './interfaces';\nimport { Settings } from './settingsEntity';\n\nexport const getSettings = async (_: unknown, res: Response<Settings>): Promise<void> => {\n    try {\n        const result = await settingsService.getSettings();\n        res.send(result);\n    } catch (err) {\n        console.log('no result');\n        console.log(err);\n        throw new AppError(err.name, err.httpCode, err.description);\n    }\n};\n\nexport const saveSettings = async (\n    req: Request<{}, unknown, ISettings>,\n    res: Response<Settings | string | number>,\n): Promise<void> => {\n    try {\n        const result = await settingsService.saveSettings(req.body);\n        await gitCommandsService.cloneRepo(req.body.userName, req.body.repoName);\n        res.send(result);\n    } catch (err) {\n        throw new AppError(err.name, err.httpCode, err.description);\n    }\n};\n","import { Router } from 'express';\n\nimport { getSettings, saveSettings } from './settingsControllers';\nconst router = Router();\n\nrouter.get('/', getSettings);\nrouter.post('/', saveSettings);\n\nexport default router;\n","import deepEqual from 'deep-equal';\nimport { getRepository } from 'typeorm';\nimport { AppError } from '@server/components/error/error';\nimport { HttpStatus } from '@server/HttpStatus';\n\nimport { Settings } from './settingsEntity';\n\nexport const settingsService = {\n    getSettings: async (): Promise<Settings | undefined> => {\n        try {\n            const repository = getRepository(Settings);\n            return repository.findOne();\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n\n    saveSettings: async (settingsData: Settings): Promise<number> => {\n        try {\n            const repository = getRepository(Settings);\n\n            const prevSettings = await repository.findOne();\n\n            if (!prevSettings) {\n                await repository.save(settingsData);\n                return HttpStatus.OK;\n            }\n\n            const newSettings = repository.create({\n                ...settingsData,\n                id: prevSettings.id,\n            });\n            const isEqual = deepEqual(prevSettings, newSettings);\n\n            if (!isEqual) {\n                await repository.update(prevSettings.id, newSettings);\n                return HttpStatus.OK;\n            } else {\n                return HttpStatus.NOT_MODIFIED;\n            }\n        } catch (err) {\n            throw new AppError(err.name, err.httpCode, err.description);\n        }\n    },\n};\n"],"sourceRoot":""}